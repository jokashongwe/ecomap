<?php

namespace App\Entity;

use App\Repository\ExploitationRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ExploitationRepository::class)]
class Exploitation
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'exploitations')]
    private ?Product $product = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2)]
    private ?string $surface_acres = null;

    #[ORM\Column(type: Types::DATE_MUTABLE)]
    private ?\DateTimeInterface $startedAt = null;

    #[ORM\Column(length: 20)]
    private ?string $status = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $createdAt = null;

    #[ORM\ManyToOne(inversedBy: 'exploitations')]
    private ?TypeExploitation $typeExploitation = null;

    #[ORM\ManyToOne(inversedBy: 'exploitations')]
    private ?AddressExploitation $address = null;

    /**
     * @var Collection<int, ProductionPhase>
     */
    #[ORM\OneToMany(targetEntity: ProductionPhase::class, mappedBy: 'exploitation')]
    private Collection $productionPhases;

    #[ORM\ManyToOne(inversedBy: 'exploitations')]
    private ?Corporation $corporation = null;

    public function __construct()
    {
        $this->productionPhases = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getProduct(): ?Product
    {
        return $this->product;
    }

    public function setProduct(?Product $product): static
    {
        $this->product = $product;

        return $this;
    }

    public function getSurfaceAcres(): ?string
    {
        return $this->surface_acres;
    }

    public function setSurfaceAcres(string $surface_acres): static
    {
        $this->surface_acres = $surface_acres;

        return $this;
    }

    public function getStartedAt(): ?\DateTimeInterface
    {
        return $this->startedAt;
    }

    public function setStartedAt(\DateTimeInterface $startedAt): static
    {
        $this->startedAt = $startedAt;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeImmutable $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getTypeExploitation(): ?TypeExploitation
    {
        return $this->typeExploitation;
    }

    public function setTypeExploitation(?TypeExploitation $typeExploitation): static
    {
        $this->typeExploitation = $typeExploitation;

        return $this;
    }

    public function getAddress(): ?AddressExploitation
    {
        return $this->address;
    }

    public function setAddress(?AddressExploitation $address): static
    {
        $this->address = $address;

        return $this;
    }

    /**
     * @return Collection<int, ProductionPhase>
     */
    public function getProductionPhases(): Collection
    {
        return $this->productionPhases;
    }

    public function addProductionPhase(ProductionPhase $productionPhase): static
    {
        if (!$this->productionPhases->contains($productionPhase)) {
            $this->productionPhases->add($productionPhase);
            $productionPhase->setExploitation($this);
        }

        return $this;
    }

    public function removeProductionPhase(ProductionPhase $productionPhase): static
    {
        if ($this->productionPhases->removeElement($productionPhase)) {
            // set the owning side to null (unless already changed)
            if ($productionPhase->getExploitation() === $this) {
                $productionPhase->setExploitation(null);
            }
        }

        return $this;
    }

    public function getCorporation(): ?Corporation
    {
        return $this->corporation;
    }

    public function setCorporation(?Corporation $corporation): static
    {
        $this->corporation = $corporation;

        return $this;
    }
}
